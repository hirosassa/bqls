//go:build ignore

// This program is run via "go generate" to generate builtin functions.

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"log"
	"net/http"
	"os"
	"regexp"
	"slices"
	"strings"
	"text/template"

	md "github.com/JohannesKaufmann/html-to-markdown"
	"github.com/PuerkitoBio/goquery"
)

type function struct {
	Name        string
	Method      string
	Description string
	ExampleSQLs []string
	URL         string
}

func main() {
	urls := []string{
		"https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions",
		"https://cloud.google.com/bigquery/docs/reference/standard-sql/approximate_aggregate_functions",
		"https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions",
		"https://cloud.google.com/bigquery/docs/reference/standard-sql/bit_functions",
		"https://cloud.google.com/bigquery/docs/reference/standard-sql/table-functions-built-in",
		"https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions",
		"https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions",
		"https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions",
		"https://cloud.google.com/bigquery/docs/reference/standard-sql/debugging_functions",
		"https://cloud.google.com/bigquery/docs/reference/standard-sql/interval_functions",
		"https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions",
		"https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions",
		"https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions",
		"https://cloud.google.com/bigquery/docs/reference/standard-sql/net_functions",
		"https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions",
		"https://cloud.google.com/bigquery/docs/reference/standard-sql/search_functions",
		"https://cloud.google.com/bigquery/docs/reference/standard-sql/security_functions",
		"https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions",
		"https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions",
		"https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions",
		"https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions",
		"https://cloud.google.com/bigquery/docs/reference/standard-sql/utility-functions",
	}

	functions := make([]function, 0)
	for _, url := range urls {
		functions = append(functions, loadFunctions(url)...)
	}

	generate(functions)
}

func generate(functions []function) {
	funcMap := template.FuncMap{
		"escape": func(s string) string {
			out := strings.ReplaceAll(s, "\\", "\\\\")
			out = strings.ReplaceAll(out, "\n", "\\n")
			out = strings.ReplaceAll(out, "\"", "\\\"")
			return out
		},
	}

	tmpl, err := template.New("gen").Funcs(funcMap).Parse(templateCode)
	if err != nil {
		log.Fatal(err)
	}

	var out bytes.Buffer
	err = tmpl.Execute(&out, map[string]any{
		"Functions": functions,
	})
	if err != nil {
		log.Fatal("template Execute:", err)
	}

	formatted, err := format.Source(out.Bytes())
	if err != nil {
		fmt.Println(out.String())
		log.Fatal("format:", err)
	}

	if err := os.WriteFile("builtin_function.go", formatted, 0644); err != nil {
		log.Fatal("write file:", err)
	}
}

const templateCode = `// Code generated by gen_builtin_function.go, DO NOT EDIT.
package function

var BuiltInFunctions = []BuiltInFunction{
		{{range .Functions}}{
			Name:            "{{.Name}}",
			Method:          "{{.Method | escape}}",
			Description: "{{.Description | escape}}",
			ExampleSQLs:     []string{
				{{range .ExampleSQLs}}"{{. | escape}}",
			{{end}}},
			URL: "{{.URL}}",
		},
{{end}}}
`

const sectionHeader = "h2"

var docRegexp = regexp.MustCompile(`\[([\w\s]+)\]\(/bigquery/docs/(.+)\)`)

func loadFunctions(url string) []function {
	resp, err := http.Get(url)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()

	doc, err := goquery.NewDocumentFromReader(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	methods := make([]string, 0)
	doc.Find("div.devsite-article-body").Find("tbody").Children().Each(func(i int, s *goquery.Selection) {
		code := s.Find("code").First()
		if code.Text() != "" {
			methods = append(methods, code.Text())
		}
	})
	methods = slices.Compact(methods)

	functions := make([]function, 0)
	for _, method := range methods {
		document := doc.Find(fmt.Sprintf("%s[data-text=%s]", sectionHeader, method))
		if !document.Is(sectionHeader) {
			continue
		}
		name := document.Text()
		functionURL := fmt.Sprintf("%s#%s", url, strings.ToLower(method))

		methodSelection := document.Next().Next()
		method := strings.TrimSpace(methodSelection.Text())

		descriptionSelection := methodSelection
		i := 0
		for !descriptionSelection.Is(sectionHeader) && i < 10 {
			if descriptionSelection.Text() == "Description" {
				break
			}
			descriptionSelection = descriptionSelection.Next()
			i++
		}
		descriptionSelection = descriptionSelection.Next()

		var description string
		i = 0
		converter := md.NewConverter("", true, nil)
		for !descriptionSelection.Children().First().Is("strong") && i < 10 {
			descHTML, err := descriptionSelection.Html()
			if err != nil {
				log.Fatalf("failed to get html of description: %v", err)
			}

			descMarkdown, err := converter.ConvertString(descHTML)
			if err != nil {
				log.Fatalf("failed to convert html of description to markdown: %v", err)
			}

			description += descMarkdown
			descriptionSelection = descriptionSelection.Next()
			i++
		}
		description = strings.TrimSpace(description)

		exampleSelection := descriptionSelection
		i = 0
		for !exampleSelection.Is(sectionHeader) && i < 10 {
			if exampleSelection.Text() == "Example" || exampleSelection.Text() == "Examples" {
				break
			}
			exampleSelection = exampleSelection.Next()
			i++
		}

		examples := make([]string, 0)
		i = 0
		for !exampleSelection.Is(sectionHeader) && i < 15 {
			if code := exampleSelection.Find("code"); code != nil {
				codeParent := code.Parent()
				if codeParent.Is("pre") {
					examples = append(examples, strings.TrimSpace(code.Text()))
				}
			}
			exampleSelection = exampleSelection.Next()
			i++
		}

		functions = append(functions, function{
			Name:        name,
			Method:      method,
			Description: docRegexp.ReplaceAllString(description, "[$1](https://cloud.google.com/bigquery/docs/$2)"),
			ExampleSQLs: examples,
			URL:         functionURL,
		})
	}

	return functions
}
